name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
        docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

    - name: Build and Push Docker Image
      run: |
        docker build -t flask-app .
        docker tag flask-app:latest ${{ secrets.ECR_URI }}:latest
        docker push ${{ secrets.ECR_URI }}:latest

    - name: Deploy to EC2
      run: |
        # Write the private key from the secret to a temporary file
        echo "${{ secrets.EC2_KEY }}" > ec2-key.pem
        chmod 600 ec2-key.pem

        # Connect to EC2 and deploy the application
        ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        set -e  # Exit script if any command fails

        # Stop and remove any existing container named "flask-app"
        echo "Stopping and removing existing container named 'flask-app' (if exists)..."
        if [ \$(docker ps -aq -f name=flask-app) ]; then
            docker stop flask-app || true
            docker rm flask-app || true
        fi

        # Pull the latest image from ECR
        echo "Pulling the latest image from ECR..."
        docker pull ${{ secrets.ECR_URI }}:latest

        # Check if .env file exists and copy it to the container
        echo "Ensuring .env file exists on the EC2 instance..."
        if [ ! -f /home/ec2-user/project_hospital/.env ]; then
            echo "Environment file not found. Creating default .env file..."
            echo -e "FLASK_ENV=production\nMYSQL_USER=root\nMYSQL_PASSWORD=Mysql123\nMYSQL_HOST=localhost\nMYSQL_DB=hospital" > /home/ec2-user/project_hospital/.env
        fi

        # Run the new container with environment variables
        echo "Running the new Docker container..."
        docker run -d -p 5000:5000 --name flask-app \
          --env-file /home/ec2-user/project_hospital/.env \
          ${{ secrets.ECR_URI }}:latest
        EOF

        # Remove the key file for security
        rm ec2-key.pem
